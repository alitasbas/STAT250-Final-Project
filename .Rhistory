libs <- c("ggplot2", "dplyr", "readr", "magrittr")
# 2- genre profit over years
kg %<>%
# filter(genre %in% genre_list) %>%
mutate(profit = (gross - budget) / budget * 100)
ggplot(kg, aes(x=profit)) + geom_histogram()
head(kg$profit)
ggplot(kg, aes(x=profit)) + geom_histogram(bins = 20)
table(kg$profit)
sort(table(kg$profit), decreasing = F)
sort(table(kg$profit), decreasing = F)[1:10]
sort(table(kg$profit), decreasing = T)[1:10]
sort(names(table(kg$profit)), decreasing = T)[1:10]
summary(kg$profit)
summary(kg$gross)
summary(kg$budget)
# Start the EDA process
colnames(tmdb_movies)
summary(tmdb)
summary(tmdb_moviees)
summary(tmdb_movies)
sort(table(tmdb_movies$revenue), decreasing =T)
sort(table(tmdb_movies$revenue), decreasing =T)[1:10]
nrow(tmdb_movies)
p_time_series <- ggplot(profit, aes(x=year, y=avg_profit_perc, color=genre)) +
geom_line() +
geom_point()
p_time_series
table(high_profit_genre_list)
profit <- p %>%
group_by(genre) %>%
summarize(avg_profit = mean(profit, na.rm =T)) %>%
arrange(desc(avg_profit)) # Take top for and plot on a time series
profit
high_profit_genre_list <- p[p$profit %in% sort(p$profit, decreasing = T)[1:100], "genre"]
high_profit_genre_list
table(high_profit_genre_list)
profit <- p %>%
group_by(genre) %>%
summarize(avg_profit = mean(profit, na.rm =T)) %>%
arrange(desc(avg_profit)) # Take top for and plot on a time series
profit
# Import the data sets
tmdb <- read.csv("Databases/tmdb_5000_movies.csv")
head(tmdb)
colnames(tmdb)
# 2- Genre profit over years
tmdb %<>%
mutate(profit = (revenue - budget) / budget * 100)
summary(tmdb$profit)
# 2- Genre profit over years
summary(tmdb)
# 2- Genre profit over years
summary(tmdb["budget", "revenu"])
# 2- Genre profit over years
summary(tmdb[["budget", "revenu"]])
# 2- Genre profit over years
summary(tmdb[c("budget", "revenue"), ])
# 2- Genre profit over years
summary(tmdb[, c("budget", "revenue")])
nrow(tmdb[tmdb$budget==0, ])
# As movies can't be produced for free, remove all observations with budget=0
tmdb %<>%
filter(budget != 0)
nrow(tmdb[tmdb$budget==0, ])
nrow(tmdb[tmdb$revenue==0, ])
tmdb[tmdb$revenue==0, ]
head(tmdb[tmdb$revenue==0, ])
colnames(tmdb)
# There are some flops are wrong values for revenues, too. Get rid of them too.
tmdb %<>%
filter(revenue > 10000)
tmdb %<>%
mutate(profit = (revenue - budget) / budget * 100)
summar(tmdb$profit)
summary(tmdb$profit)
tmdb %<>%
mutate(profit = (revenue - budget) / budget * 100)
summary(tmdb$profit)
# 2- Genre profit over years
summary(tmdb[, c("budget", "revenue")])
tmdb[tmdb$original_title=="Kevin Hart: Let Me Explain", c("budget", "revenue")]
# As movies can't be produced for free, remove all observations with budget=0
tmdb %<>%
filter(budget != 0)
# There are some flops are wrong values for revenues, too. Get rid of them too.
tmdb %<>%
filter(revenue > 10000)
# 2- Genre profit over years
summary(tmdb[, c("budget", "revenue")])
# As movies can't be produced for free, remove all observations with budget=0.
# Additionally, some budget entries are in millions. Take budget greater than 10000.
tmdb %<>%
filter(budget > 10000)
# There are some flops are wrong values for revenues, too. Get rid of them too.
tmdb %<>%
filter(revenue > 10000)
tmdb %<>%
mutate(profit = (revenue - budget) / budget * 100)
# 2- Genre profit over years
summary(tmdb[, c("budget", "revenue")])
# 2- Genre profit over years
summary(tmdb$profit)
profit <- p %>%
group_by(genre) %>%
summarize(avg_profit = mean(profit, na.rm =T)) %>%
arrange(desc(avg_profit)) # Take top for and plot on a time series
profit <- tmdb %>%
group_by(genre) %>%
summarize(avg_profit = mean(profit, na.rm =T)) %>%
arrange(desc(avg_profit)) # Take top for and plot on a time series
library(jsonlite)
fromJSON([{"id": 18, "name": "Drama"}, {"id": 16, "name": "Animation"}, {"id": 10751, "name": "Family"}, {"id": 35, "name": "Comedy"}])
fromJSON("[{"id": 18, "name": "Drama"}, {"id": 16, "name": "Animation"}, {"id": 10751, "name": "Family"}, {"id": 35, "name": "Comedy"}]")
str <- "[{"id": 18, "name": "Drama"}, {"id": 16, "name": "Animation"}, {"id": 10751, "name": "Family"}, {"id": 35, "name": "Comedy"}]"
str <- '[{"id": 18, "name": "Drama"}, {"id": 16, "name": "Animation"}, {"id": 10751, "name": "Family"}, {"id": 35, "name": "Comedy"}]'
fromJSON(str)
fromJSON(str)[[1]]
fromJSON(str)[[1]]$name
fromJSON(str)[1]$name
fromJSON(str)[1]
fromJSON(str)[[1]]
fromJSON(str)[[1]][1]
fromJSON(str)[[2]][1]
l <- fromJSON(str)
l
class(l)
l[1, "name"]
# Apply the function to the column
data$first_genre_name <- sapply(tmdb$genres, extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list[1, "name"])  # Extract the name of the first genre
}
# Apply the function to the column
data$first_genre_name <- sapply(tmdb$genres, extract_first_name)
genre_list
genre_list <- fromJSON(str)
genre_list
genre_list[1, "name"]
# Apply the function to the column
data$first_genre_name <- sapply(tmdb$genres, extract_first_name)
sapply(tmdb$genres, extract_first_name)
# Apply the function to the column
data$first_genre_name <- sapply(tmdb$genres, extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list[[1]]$name)  # Extract the name of the first genre
}
# Apply the function to the column
data$first_genre_name <- sapply(tmdb$genres, extract_first_name)
return(genre_list[[1]])  # Extract the name of the first genre
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list[[1]])  # Extract the name of the first genre
}
# Apply the function to the column
data$first_genre_name <- sapply(tmdb$genres, extract_first_name)
return(genre_list)  # Extract the name of the first genre
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list)  # Extract the name of the first genre
}
# Apply the function to the column
data$first_genre_name <- sapply(tmdb$genres, extract_first_name)
data$first_genre_name <- sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list[[1]])  # Extract the name of the first genre
}
data$first_genre_name <- sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list$name)  # Extract the name of the first genre
}
data$first_genre_name <- sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list[1, "name"])  # Extract the name of the first genre
}
data$first_genre_name <- sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list$name[1])  # Extract the name of the first genre
}
# Apply the function to the column
data$first_genre_name <- sapply(tmdb$genres, extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
paste(genre_list)  # Extract the name of the first genre
}
data$first_genre_name <- sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Apply the function to the column
tmdb$first_genre_name <- sapply(tmdb$genres, extract_first_name)
head(tmdb$first_genre_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
paste(genre_list[1, "name"])  # Extract the name of the first genre
}
# Apply the function to the column
tmdb$first_genre_name <- sapply(tmdb$genres, extract_first_name)
sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
paste(genre_list[1, "name"])  # Extract the name of the first genre
}
sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
paste(genre_list[1])  # Extract the name of the first genre
}
sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
paste(genre_list[[1]])  # Extract the name of the first genre
}
sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
paste(genre_list[[1]]$name)  # Extract the name of the first genre
}
sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
paste(genre_list$name[1])  # Extract the name of the first genre
}
sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
genre_list
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list$name[1])  # Extract the name of the first genre
}
sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# Currently, the genre column is in JSON format. We want to extract the first genre.
extract_first_name <- function(json_str) {
genre_list <- fromJSON(json_str)  # Convert JSON string to list
return(genre_list[[1]]$name)  # Extract the name of the first genre
}
sapply(c('[{"id": 18, "name": "Drama"}, {"id": 10749, "name": "Romance"}]', '[{"id": 10749, "name": "Romance"}, {"id": 18, "name": "Drama"}]'), extract_first_name)
# 2- Genre profit over years KG
summary(kg[, c("budget", "revenue")])
# 2- Genre profit over years KG
summary(kg[, c("budget", "gross")])
nrow(tmdb[tmdb$budget==0, ])
nrow(tmdb[tmdb$revenue==0, ])
nrow(kg[kg$budget==0, ])
nrow(kg[kg$gross==0, ])
# As movies can't be produced for free, remove all observations with budget=0.
# Additionally, some budget entries are in millions. Take budget greater than 10000.
kg %<>%
filter(budget > 10000)
# There are some flops and wrong values for revenues. Get rid of them, too.
kg %<>%
filter(revenue > 10000)
# There are some flops and wrong values for revenues. Get rid of them, too.
kg %<>%
filter(gross > 10000)
# 2- Genre profit over years KG
summary(kg[, c("budget", "gross")])
kg %<>%
mutate(profit = (gross - budget) / budget * 100)
summary(kg$profit)
ggplot(kg, aes(x=profit)) + geom_histogram()
ggplot(kg, aes(x=profit)) + geom_histogram() + scale_x_continuous(breaks = seq(0, 10, by = 2), limits = c(0, 100000))
ggplot(kg, aes(x=profit)) + geom_histogram() + scale_x_continuous(breaks = seq(0, 10, by = 2), limits = c(0, 10))
ggplot(kg, aes(x=profit)) + geom_histogram() + scale_x_continuous(breaks = seq(0, 10, by = 2), limits = c(0, 100))
ggplot(kg, aes(x=profit)) + geom_histogram() + scale_x_continuous(breaks = seq(0, 100, by = 10), limits = c(0, 100))
ggplot(kg, aes(x=profit)) + geom_histogram() + scale_x_continuous(breaks = seq(0, 100, by = 10), limits = c(0, 1000))
ggplot(kg, aes(x=profit)) + geom_histogram() + scale_x_continuous(breaks = seq(0, 1000, by = 75), limits = c(0, 1000))
ggplot(kg, aes(x=profit)) + geom_histogram() + scale_x_continuous(breaks = seq(0, 1000, by = 75), limits = c(0, 10000))
# If outliers exist, remove them.
summary(kg$profit)
IQR(kg$profit)
IQR(kg$profit) * 1.5
kg %<>%
filter(profit < quantile(kg$profit, 0.75) + IQR(kg$profit) * 1.5)
# If outliers exist, remove them.
summary(kg$profit)
# Import the necessary libraries
libs <- c("ggplot2", "dplyr", "readr", "magrittr", "jsonlite")
lapply(libs, require, character.only = TRUE)
# Import the data sets
tmdb <- read.csv("Databases/tmdb_5000_movies.csv")
kg <- read.csv("Databases/Kaggle_movies.csv")
# The tmdb_credits data frame contains movie_id, title, cast, and crew columns.
# The cast and crew columns are dictionaries containing multiple entries.
# They can be considered datasets on their own.
# The tmdb_credits data frame on the other hand has a lots of different columns
# mostly in a structured format. Some of the variables like keywords contain
# multiple values in a dictionary like structure
# The movies data set is just beauty to the eye
# Start the EDA process
colnames(tmdb)
colnames(kg)
head(tmdb[, "production_countries"])
head(tmdb)
# Are the genre distributions different across regions?
# create a region column to group countries to based on regions
eu_countries <- c("Austria", "Belgium", "Bulgaria", "Czech Republic", "Denmark", "Finland", "France", "Georgia", "Greece", "Germany",
"Hungary", "Iceland", "Ireland", "Italy", "Malta", "Netherlands", "Norway", "Poland", "Portugal",
"Republic of Macedonia", "Romania", "Slovakia", "Slovenia", "Spain", "Sweden", "Switzerland", "Turkey",
"United Kingdom", "West Germany", "Yugoslavia")
others <- c("Afghanistan", "Australia", "Bahamas", "Cambodia", "Cameroon", "Canada", "Chile", "China", "Colombia",
"Dominican Republic", "Egypt", "Hong Kong", "India", "Indonesia", "Iran", "Israel", "Japan", "Kenya")
kg <- kg[kg$country != "", ]
kg <- kg %>% mutate(
region = case_when(
country %in% eu_countries ~ "Europe",
country == "United States" ~ "USA",
T ~ "Others"
)
)
table(kg$region)
# To construct a side-by-side bar chart, extract the distributions
# Filter only Action, Drama, Comedy, Horror, Animation
acdh_genres <- c("Action", "Drama", "Comedy", "Horror", "Animation")
usa_grp <- kg %>%
filter(genre %in% acdh_genres & region == "USA") %>%
group_by(region, genre) %>%
summarize(prop = n() / table(kg$region)[3],
count = n())
eu_grp <- kg %>%
filter(genre %in% acdh_genres & region == "Europe") %>%
group_by(region, genre) %>%
summarize(prop = n() / table(kg$region)[1],
count = n())
others_grp <- kg %>%
filter(genre %in% acdh_genres & region == "Others") %>%
group_by(region, genre) %>%
summarize(prop = n() / table(kg$region)[2],
count = n())
props_grp <- rbind(usa_grp, eu_grp, others_grp)
genre_region_props <- ggplot(props_grp, aes(x=region, y=prop, fill=genre)) +
geom_bar(stat="identity", position="dodge")
genre_region_props
# Conduct a chisquare test for this contingency table
# Take the first genre
# kg <- kg %>%
#   mutate(main_genre = strsplit(genres, "\\|"))
# unique(kg$genres)
# 2- Genre profit over years TMDB
summary(tmdb[, c("budget", "revenue")])
nrow(tmdb[tmdb$budget==0, ])
nrow(tmdb[tmdb$revenue==0, ])
# As movies can't be produced for free, remove all observations with budget=0.
# Additionally, some budget entries are in millions. Take budget greater than 10000.
tmdb %<>%
filter(budget > 10000)
# There are some flops and wrong values for revenues. Get rid of them, too.
tmdb %<>%
filter(revenue > 10000)
tmdb %<>%
mutate(profit = (revenue - budget) / budget * 100)
profit <- tmdb %>%
group_by(genre) %>%
summarize(avg_profit = mean(profit, na.rm =T)) %>%
arrange(desc(avg_profit)) # Take top for and plot on a time series
# 2- Genre profit over years KG
summary(kg[, c("budget", "gross")])
nrow(kg[kg$budget==0, ])
nrow(kg[kg$gross==0, ])
# As movies can't be produced for free, remove all observations with budget=0.
# Additionally, some budget entries are in millions. Take budget greater than 10000.
kg %<>%
filter(budget > 10000)
# There are some flops and wrong values for revenues. Get rid of them, too.
kg %<>%
filter(gross > 10000)
kg %<>%
mutate(profit = (gross - budget) / budget * 100)
sort(kg$profit, decreasing = T)
sort(kg$profit, decreasing = T)[1:10]
kg[kg$profit %in% sort(kg$profit, decreasing = T)[1:10], ]
IQR(kg$profit) * 1.5
quantile(kg$profit, 0.75) + IQR(kg$profit) * 1.5
kg %<>%
filter(profit < sort(kg$profit, decreasing = T)[3])
# There are some outliers. We decided to increase outlier tolerance as they are true
# but extreme values. Remove the 3 highest profits.
summary(kg$profit)
genre_profits <- kg %>%
group_by(genre) %>%
summarize(avg_profit = mean(profit, na.rm =T)) %>%
arrange(desc(avg_profit)) # Take top for and plot on a time series
genre_profits
# Construct a time-series plot
profit_df <- kg %>%
filter(genre %in% top_genre_list) %>%
group_by(year, genre) %>%
summarize(avg_profit_perc = mean(profit, na.rm = T))
profit_df
profit_time_series <- ggplot(profit, aes(x=year, y=avg_profit_perc, color=genre)) +
geom_line() +
geom_point()
profit_time_series
profit_time_series <- ggplot(profit_df, aes(x=year, y=avg_profit_perc, color=genre)) +
geom_line() +
geom_point()
profit_time_series
sort(kg$profit, decreasing = T)[1:15]
kg[kg$profit %in% sort(kg$profit, decreasing = T)[1:15], ]
genre_profits
# Family seems unusually high
kg %>%
filter(genre=="Family") %>%
arrange(profit)
# Family seems unusually high
kg %>%
filter(genre=="Horror") %>%
arrange(profit)
# Family seems unusually high
kg %>%
filter(genre=="Thriller") %>%
arrange(profit)
# Family seems unusually high
kg %>%
filter(genre=="Animation") %>%
arrange(profit)
genre_profits
# Family seems unusually high
kg %>%
filter(genre=="Thriller") %>%
arrange(profit)
# Family seems unusually high
kg %>%
filter(genre=="Drama") %>%
arrange(profit)
# Family seems unusually high
kg %>%
filter(genre=="Comedy") %>%
arrange(profit)
# Family seems unusually high
kg %>%
filter(genre=="Animation") %>%
arrange(profit)
genre_profits
# These are the highest viable profiting genres on average
top_genre_list <- c("Horror", "Drama", "Comedy", "Animation")
# Construct a time-series plot
profit_df <- kg %>%
filter(genre %in% top_genre_list) %>%
group_by(year, genre) %>%
summarize(avg_profit_perc = mean(profit, na.rm = T))
profit_time_series <- ggplot(profit_df, aes(x=year, y=avg_profit_perc, color=genre)) +
geom_line() +
geom_point()
profit_time_series
kg %>%
group_by(genre,year) %>%
summarize(avg_gross = mean(gross)) %>%
ggplot(mapping = aes(x = year, y = avg_gross, color=genre)) +
geom_point() +
geom_line() +
ylab("Average Gross Revenue (in US Dollars)") +
ggtitle("Gross Revenue Over Time")
profit_time_series_no_horror <- profit_df %>%
filter(genre != "Horror") %>%
ggplot(profit_df, aes(x=year, y=avg_profit_perc, color=genre)) +
geom_line() +
geom_point()
profit_time_series_no_horror <- profit_df %>%
filter(genre != "Horror") %>%
ggplot(aes(x=year, y=avg_profit_perc, color=genre)) +
geom_line() +
geom_point()
profit_time_series_no_horror
kg %>%
group_by(genre,year) %>%
summarize(avg_gross = mean(gross)) %>%
ggplot(mapping = aes(x = year, y = avg_gross, color=genre)) +
geom_point() +
geom_line() +
ylab("Average Gross Revenue (in US Dollars)") +
ggtitle("Gross Revenue Over Time")
kg %>%
filter(genre !%in% top_genre_list) %>%
kg %>%
filter(genre %notin% top_genre_list) %>%
group_by(genre,year) %>%
summarize(avg_gross = mean(gross)) %>%
ggplot(mapping = aes(x = year, y = avg_gross, color=genre)) +
geom_point() +
geom_line() +
ylab("Average Gross Revenue (in US Dollars)") +
ggtitle("Gross Revenue Over Time")
kg %>%
filter(!(genre %in% top_genre_list)) %>%
group_by(genre,year) %>%
summarize(avg_gross = mean(gross)) %>%
ggplot(mapping = aes(x = year, y = avg_gross, color=genre)) +
geom_point() +
geom_line() +
ylab("Average Gross Revenue (in US Dollars)") +
ggtitle("Gross Revenue Over Time")
source("D:/ODTU/Sem 4/STAT250/STAT250-Final-Project/Main EDA.R", echo=TRUE)
source("D:/ODTU/Sem 4/STAT250/STAT250-Final-Project/Main EDA.R", echo=TRUE)
