filter(z_score < 5 & z_score > 2.5)
shapiro.test(tf$score) # There is an improvement
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
# T2
tf <- df %>%
mutate(z_score = score^(1/3) ) %>%
slice_sample(n = 4999)
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
shapiro.test(tf$score) # There is an improvement
tf %<>%
filter(z_score < 5 & z_score > 1.5)
shapiro.test(tf$score) # There is an improvement
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf %<>%
filter(z_score < 5 & z_score > 1.62)
shapiro.test(tf$score) # There is an improvement
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf %<>%
filter(z_score < 5 & z_score > 1.65)
shapiro.test(tf$score) # There is an improvement
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
# T2
tf <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf %<>%
filter(z_score < 5 & z_score > 1.41)
shapiro.test(tf$score) # There is an improvement
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf %<>%
filter(z_score < 5 & z_score > 1.43)
shapiro.test(tf$score) # There is an improvement
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf %<>%
filter(z_score < 5 & z_score > 1.45)
shapiro.test(tf$score) # There is an improvement
ggplot(data, aes(x = x, y = ress)) +
geom_point(color = "blue", alpha = 0.5) +  # Adjust color and transparency as desired
labs(title = "Residual Plot",
x = "Independent Variable",
y = "Residuals") +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray")
#####
model_tf <- lm(score ~ budget + genre + company + runtime, data = tf)
durbinWatsonTest(modeltf)
#####
model_tf <- lm(score ~ budget + genre + company + runtime, data = tf)
durbinWatsonTest(modeltf)
durbinWatsonTest(model_tf)
#####
model_tf2 <- lm(score ~ budget + genre + company + runtime, data = tf2)
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 5 & z_score > 1.43)
shapiro.test(tf$score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 5 & z_score > 1.43)
shapiro.test(tf$score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.74 & z_score > 1.43)
shapiro.test(tf$score) # There is an improvement
shapiro.test(tf2$score) # There is an improvement
tf2 %<>%
filter(z_score < 5 & z_score > 1.43)
shapiro.test(tf2$score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 5 & z_score > 1.43)
shapiro.test(tf2$score) # There is an improvement
tf2 %<>%
filter(z_score < 1.745 & z_score > 1.43)
ggplot(tf, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
shapiro.test(tf2$score) # There is an improvement
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.745 & z_score > 1.43)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
shapiro.test(tf2$score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 4 & z_score > 1.43)
shapiro.test(tf2$score) # There is an improvement
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.73 & z_score > 1.43)
shapiro.test(tf2$score) # There is an improvement
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.73 & z_score > 1.44)
shapiro.test(tf2$score) # There is an improvement
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.73 & z_score > 1.44)
shapiro.test(tf2$score) # There is an improvement
tf2 %<>%
filter(z_score < 1.73 & z_score > 1.45)
shapiro.test(tf2$score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.73 & z_score > 1.45)
shapiro.test(tf2$score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.79 & z_score > 1.4)
shapiro.test(tf2$score) # There is an improvement
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.79 & z_score > 1.4)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.79 & z_score > 1.4)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.79 & z_score > 1.4)
shapiro.test(tf2$score) # There is an improvement
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.74 & z_score > 1.4)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
shapiro.test(tf2$score) # There is an improvement
tf2 %<>%
filter(z_score < 1.74 & z_score > 1.45)
shapiro.test(tf2$score) # There is an improvement
shapiro.test(tf$score) # There is an improvement
#####
model_tf2 <- lm(score ~ budget + genre + company + runtime, data = tf2)
durbinWatsonTest(model_tf2)
#####
model_tf2 <- lm(z_score ~ budget + genre + company + runtime, data = tf2)
model_tf <- lm(z_score ~ budget + genre + company + runtime, data = tf)
durbinWatsonTest(model_tf2)
durbinWatsonTest(model_tf)
summary(model_tf)
summary(model_tf2)
source("D:/ODTU/Sem 4/STAT250/STAT250-Final-Project/model.R", echo=TRUE)
nrow(tf)
shapiro.test(tf$z_score) # There is an improvement
# Transformations
tf <- df %>%
mutate(z_score = (score - mean(score, na.rm=T)) / sd(score) ) %>%
slice_sample(n = 4999)
tf
ggplot(tf, aes(x=z_score)) +
geom_density() # Eliminate outliers
tf %<>%
filter(z_score < 2.5 & z_score > -2.5)
shapiro.test(tf$z_score) # There is an improvement
head(df)
# Transformations
tf <- df %>%
mutate(z_score = (score - mean(score, na.rm=T)) / sd(score) ) %>%
slice_sample(n = 4999)
tf
mean(df$score)
mean(df$score, na.rm =T)
sd(df$score)
sd(df$score, na.rm )
sd(df$score, na.rm =T)
# Transformations
tf <- df %>%
mutate(z_score = (score - mean(score, na.rm=T)) / sd(score, na.rm = T) ) %>%
slice_sample(n = 4999)
ggplot(tf, aes(x=z_score)) +
geom_density() # Eliminate outliers
tf %<>%
filter(z_score < 2.5 & z_score > -2.5)
shapiro.test(tf$z_score) # There is an improvement
ggplot(tf, aes(x=z_score)) +
geom_density() # Eliminate outliers
tf %<>%
filter(z_score < 2.5 & z_score > -2.5)
shapiro.test(tf$z_score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.74 & z_score > 1.45)
shapiro.test(tf2$score) # There is an improvement
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.74 & z_score > 1.45)
shapiro.test(tf2$score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.74 & z_score > 1.45)
shapiro.test(tf2$score) # There is an improvement
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
ggplot(tf2, aes(x=z_score)) +
geom_density() # Eliminate outliers
#####
model_tf2 <- lm(z_score ~ budget + genre + company + runtime, data = tf2)
model_tf <- lm(z_score ~ budget + genre + company + runtime, data = tf)
plot(model_tf)
plot(model_tf2)
durbinWatsonTest(model_tf)
durbinWatsonTest(model_tf2)
summary(model_tf)
summary(model_tf2)
new_film <- data.frame(budget = 215000000, genre = "Action", company = "Walt Disney Pictures", runtime = 150)
predict(model_tf2, newdata = new_film)
predict(model_tf2, newdata = new_film) ^ 4
new_film <- data.frame(budget = 150000000, genre = "Animation", company = "Walt Disney Pictures", runtime = 108)
predict(model_tf2, newdata = new_film) ^ 4
df %<>%
select(score, budget, genre, company, runtime, rating, year) %>%
mutate(company = ifelse(company %in% top_companies, company, "other"))
df = read.csv("Databases/Kaggle_movies.csv")
top_companies <- names(sort(table(df$company), decreasing = T)[1:10])
df %<>%
select(score, budget, genre, company, runtime, rating, year) %>%
mutate(company = ifelse(company %in% top_companies, company, "other"))
df$genre <- as.factor(df$genre)
df$company = as.factor(df$company)
df$rating <- as.factor(df$rating)
model <- lm(score ~ budget + genre + company + runtime + rating + year, data = df)
summary(model)
df = read.csv("Databases/Kaggle_movies.csv")
insig_genres <- c("Adventure", "Family", "Fantasy", "Mystery", "Romance", "Sci-Fi", "Thriller", "Western")
df %<>%
select(score, budget, genre, company, runtime) %>%
mutate(company = ifelse(str_detect(company, "Walt"), company, "other"),
genre = ifelse(genre %in% insig_genres, "other", genre))
model <- lm(score ~ budget + genre + company + runtime, data = df)
model_summary = summary(model)
model_summary
model <- lm(score ~ budget + genre + company + runtime + year, data = df)
model_summary = summary(model)
model_summary
model_summary = summary(model)
model_summary
model <- lm(score ~ budget + genre + company + runtime + year, data = df)
df %<>%
select(score, budget, genre, company, runtime, year) %>%
mutate(company = ifelse(str_detect(company, "Walt"), company, "other"),
genre = ifelse(genre %in% insig_genres, "other", genre))
model <- lm(score ~ budget + genre + company + runtime + year, data = df)
df = read.csv("Databases/Kaggle_movies.csv")
insig_genres <- c("Adventure", "Family", "Fantasy", "Mystery", "Romance", "Sci-Fi", "Thriller", "Western")
df %<>%
select(score, budget, genre, company, runtime, year) %>%
mutate(company = ifelse(str_detect(company, "Walt"), company, "other"),
genre = ifelse(genre %in% insig_genres, "other", genre))
model <- lm(score ~ budget + genre + company + runtime + year, data = df)
model_summary = summary(model)
model_summary
# Assumptions
numeric_data <- df[, c("budget", "runtime", "year")]
cor_matrix <- cor(numeric_data)
print(cor_matrix)
numeric_data
df %<>%
filter(budget > 10000)
insig_genres <- c("Adventure", "Family", "Fantasy", "Mystery", "Romance", "Sci-Fi", "Thriller", "Western")
df %<>%
select(score, budget, genre, company, runtime, year) %>%
mutate(company = ifelse(str_detect(company, "Walt"), company, "other"),
genre = ifelse(genre %in% insig_genres, "other", genre))
model <- lm(score ~ budget + genre + company + runtime + year, data = df)
model_summary = summary(model)
coefficients_summary <- coef(model_summary)
model_summary
# Assumptions
numeric_data <- df[, c("budget", "runtime", "year")]
cor_matrix <- cor(numeric_data)
print(cor_matrix)
is.na(df$year)
sum(is.na(df$year))
cor_matrix <- cor(numeric_data)
print(cor_matrix)
sum(is.na(df$runtime))
which(is.na(df$runtime))
df[4415, "runtime"]
df %<>%
filter(budget > 10000 | runtime != NA)
# Assumptions
numeric_data <- df[, c("budget", "runtime", "year")]
cor_matrix <- cor(numeric_data)
print(cor_matrix)
df %<>%
filter(budget > 10000 | !is.na(runtime))
df = read.csv("Databases/Kaggle_movies.csv")
df %<>%
filter(budget > 10000 | !is.na(runtime))
insig_genres <- c("Adventure", "Family", "Fantasy", "Mystery", "Romance", "Sci-Fi", "Thriller", "Western")
df %<>%
select(score, budget, genre, company, runtime, year) %>%
mutate(company = ifelse(str_detect(company, "Walt"), company, "other"),
genre = ifelse(genre %in% insig_genres, "other", genre))
model <- lm(score ~ budget + genre + company + runtime + year, data = df)
model_summary = summary(model)
coefficients_summary <- coef(model_summary)
ress <- resid(model)
# Assumptions
numeric_data <- df[, c("budget", "runtime", "year")]
cor_matrix <- cor(numeric_data)
print(cor_matrix)
head(df)
sum(is.na(df))
colSum(is.na(df))
colSums(is.na(df))
df %<>%
filter(budget > 10000 | !is.na(runtime))
colSums(is.na(df))
df %<>%
filter(budget > 10000 & !is.na(runtime))
colSums(is.na(df))
df %<>%
filter(budget > 10000 & !is.na(runtime) & !is.na(score))
colSums(is.na(df))
insig_genres <- c("Adventure", "Family", "Fantasy", "Mystery", "Romance", "Sci-Fi", "Thriller", "Western")
df %<>%
select(score, budget, genre, company, runtime, year) %>%
mutate(company = ifelse(str_detect(company, "Walt"), company, "other"),
genre = ifelse(genre %in% insig_genres, "other", genre))
model <- lm(score ~ budget + genre + company + runtime + year, data = df)
model_summary = summary(model)
coefficients_summary <- coef(model_summary)
ress <- resid(model)
# Assumptions
numeric_data <- df[, c("budget", "runtime", "year")]
cor_matrix <- cor(numeric_data)
print(cor_matrix)
vif(model) # No Multicollinearity
# Normality of score
shapiro.test(df[sample(nrow(df), 4999), "score"]) # Not Normal
ggplot(df, aes(x=score)) +
geom_density()
# Transformations
tf <- df %>%
mutate(z_score = (score - mean(score, na.rm=T)) / sd(score, na.rm = T) ) %>%
slice_sample(n = 4999)
ggplot(tf, aes(x=z_score)) +
geom_density() # Eliminate outliers
tf %<>%
filter(z_score < 2.5 & z_score > -2.5)
shapiro.test(tf$z_score) # There is an improvement
# T2
tf2 <- df %>%
mutate(z_score = score^(1/4) ) %>%
slice_sample(n = 4999)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
tf2 %<>%
filter(z_score < 1.74 & z_score > 1.45)
shapiro.test(tf2$score) # There is an improvement
#####
model_tf2 <- lm(z_score ~ budget + genre + company + runtime, data = tf2)
model_tf <- lm(z_score ~ budget + genre + company + runtime, data = tf)
ggplot(tf2, aes(x=z_score)) +
geom_histogram() # Eliminate outliers
shapiro.test(tf2$score) # There is an improvement
#####
model_tf2 <- lm(z_score ~ budget + genre + company + runtime, data = tf2)
model_tf <- lm(z_score ~ budget + genre + company + runtime, data = tf)
# Plot the model
par(mfrow=c(2,2))
plot(model_tf)
plot(model_tf2)
durbinWatsonTest(model_tf)
durbinWatsonTest(model_tf2)
summary(model_tf)
summary(model_tf2)
new_film <- data.frame(budget = 150000000, genre = "Animation", company = "Walt Disney Pictures", runtime = 108)
predict(model_tf2, newdata = new_film) ^ 4
#####
model_tf2 <- lm(z_score ~ budget + genre + company + runtime + year, data = tf2)
model_tf <- lm(z_score ~ budget + genre + company + runtime + year, data = tf)
durbinWatsonTest(model_tf)
durbinWatsonTest(model_tf2)
summary(model_tf)
summary(model_tf2) # resid standard error is EXTREMELY low (partly due to different response unit)
new_film <- data.frame(budget = 150000000, genre = "Animation", company = "Walt Disney Pictures", runtime = 108, year = 2016)
predict(model_tf2, newdata = new_film) ^ 4
predict(model_tf, newdata = new_film) ^ 4
predict(model_tf, newdata = new_film) * sd(score, na.rm = T) + mean(score, na.rm=T)
predict(model_tf, newdata = new_film) * sd(tf$score, na.rm = T) + mean(tf$score, na.rm=T)
dist <- read.csv("Databases/Movie_Distributors_1995-2019.csv")
head(dist)
sum(is.na(dist))
dist %<>%
mutate(Revenue.per.Film = Revenue.per.Film / 1000000,
Gross.Revenue = Gross.Revenue / 1000000)
# Plot number of movies over the years
p <- ggplot(dist, aes(x = Year, y = Films.Distributed, color = X.Distributor)) +
geom_line(aes(group = X.Distributor)) +
geom_point() +
labs(title = "Number of Movies Released Over the Years by Distributor",
x = "Year",
y = "Number of Movies") +
theme_minimal()
ggsave(filename = "Total movie per distributor.png", plot = p)
# Plot average gross revenue per film over the years
p <- ggplot(dist, aes(x = Year, y = Revenue.per.Film, color = X.Distributor)) +
geom_line(aes(group = X.Distributor)) +
geom_point() +
labs(title = "Average Gross Revenue Per Film Over the Years by Distributor",
x = "Year",
y = "Average Gross Revenue Per Film (in Millions)") +
theme_minimal()
ggsave(filename = "Average gross per film each distributor.png", plot = p)
# Plot the total gross revenue over the years
p <- ggplot(dist, aes(x = Year, y = Gross.Revenue, color = X.Distributor)) +
geom_line(aes(group = X.Distributor)) +
geom_point() +
labs(title = "Total Gross Revenue Over the Years by Distributor",
x = "Year",
y = "Total Gross Revenue (in Millions)") +
theme_minimal()
ggsave(filename = "Total Gross each distributor.png", plot = p)
# Create a Walt Disney only dataframe
walt_disney_movies <- kg %>%
filter(str_detect(company,"Walt")) %>%
select(name, genre, year, score, budget, gross, profit)
table(walt_disney_movies$year)
source("D:/ODTU/Sem 4/STAT250/STAT250-Final-Project/Main EDA.R", echo=TRUE)
